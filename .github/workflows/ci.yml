name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Allow manual triggering of the workflow

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint
      run: npm run lint || echo "Linting issues found, but continuing..."

    - name: Check TypeScript
      run: npm run check

    - name: Run tests
      run: npm test
      env:
        # Use mock values for testing
        DATABASE_URL: postgresql://test:test@localhost:5432/test
        OPENAI_API_KEY: sk-test-mock-key
        GOOGLE_CLIENT_ID: mock-client-id
        GOOGLE_CLIENT_SECRET: mock-client-secret
        GOOGLE_REDIRECT_URI: https://test-app.repl.co/api/google/callback
        REPLIT_APP_ID: mock-app-id
        REPLIT_CLIENT_ID: mock-client-id
        REPLIT_CLIENT_SECRET: mock-client-secret
        REPLIT_REDIRECT_URI: https://test-app.repl.co/api/auth/callback
        NODE_ENV: test

    - name: Generate test coverage report
      run: npm run test:coverage || echo "Coverage report generation failed, but continuing..."

  build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

  deploy-frontend-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: staging

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist

    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v2
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: 'Deploy from GitHub Actions'
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 1

  deploy-backend-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: staging

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to Render
      run: |
        # Using environment variables for Render deployment
        if [ -n "$RENDER_SERVICE_ID" ] && [ -n "$RENDER_API_KEY" ]; then
          curl -s -X POST "https://api.render.com/deploy/${RENDER_SERVICE_ID}?key=${RENDER_API_KEY}"
          echo "Deployment to Render backend complete"
        else
          echo "Render deployment skipped - environment variables not set"
        fi
      env:
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

  # Uncomment when ready for production deployments
  # deploy-production:
  #   runs-on: ubuntu-latest
  #   needs: deploy-staging
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   environment: production
  #   # Add manual approval for production deployments
  #   environment:
  #     name: production
  #     url: https://your-production-url.com
  #
  #   steps:
  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: dist
  #       path: dist
  #
  #   - name: Deploy to production
  #     run: |
  #       echo "Deploying to production environment..."
  #       # Add your production deployment commands here
  #       echo "Deployment to production complete"
